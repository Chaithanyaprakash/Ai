# Function to print the solution
def print_solution(board):
    for row in board:
        print(" ".join(str(cell) for cell in row))
    print("\n")

# Function to check if a queen can be placed at board[row][col]
def is_safe(board, row, col, N):
    # Check the column
    for i in range(row):
        if board[i][col] == 1:
            return False

    # Check the upper diagonal on the left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check the upper diagonal on the right side
    for i, j in zip(range(row, -1, -1), range(col, N)):
        if board[i][j] == 1:
            return False

    return True

# Function to solve the N-Queens problem using backtracking
def solve_n_queens(board, row, N):
    # If all queens are placed successfully
    if row >= N:
        print_solution(board)
        return True

    # Try placing the queen in all columns one by one
    res = False
    for col in range(N):
        if is_safe(board, row, col, N):
            # Place the queen
            board[row][col] = 1

            # Recur to place the rest of the queens
            res = solve_n_queens(board, row + 1, N) or res

            # Backtrack and remove the queen if it doesn't lead to a solution
            board[row][col] = 0

    return res

# Function to initialize the board and start the solving process
def n_queens(N):
    # Initialize the board with all zeros
    board = [[0 for _ in range(N)] for _ in range(N)]

    if not solve_n_queens(board, 0, N):
        print("No solution exists.")
    else:
        print("All solutions are printed above.")

# Driver code to solve the 8 Queens problem
N = 8
n_queens(N)
